import os
import requests
from dotenv import load_dotenv

load_dotenv()

DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")
DEEPINFRA_API_URL = "https://api.deepinfra.com/v1/openai/chat/completions"
MODEL = "meta-llama/Meta-Llama-3-8B-Instruct"  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –Ω–∞ –¥—Ä—É–≥—É—é

def generate_daily_quest(user_data: dict) -> dict:
    if not DEEPINFRA_API_KEY:
        return {"error": "DEEPINFRA_API_KEY not found in .env"}

    headers = {
        "Authorization": f"Bearer {DEEPINFRA_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = f"""
–¢—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ RPG-–∏–≥—Ä–µ –æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

üéØ –ó–∞–¥–∞–Ω–∏–µ: ...
üìú –û–ø–∏—Å–∞–Ω–∏–µ: ...
üèÜ –ù–∞–≥—Ä–∞–¥–∞: ...
‚è∞ –°—Ä–æ–∫: ...

–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
–ò–º—è: {user_data['name']}
–£—Ä–æ–≤–µ–Ω—å: {user_data['level']}
–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data['mood']}
–ü—Ä–∏–≤—ã—á–∫–∏: {user_data['habits']}
–¶–µ–ª–∏: {user_data['goals']}
"""

    payload = {
        "model": MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –≤ RPG –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –∂–∏–∑–Ω–∏."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.8,
        "max_tokens": 300
    }

    try:
        resp = requests.post(DEEPINFRA_API_URL, headers=headers, json=payload, timeout=30)
        resp.raise_for_status()
        data = resp.json()
        content = data["choices"][0]["message"]["content"]

        quest = {}
        for line in content.splitlines():
            if "üéØ" in line:
                quest['title'] = line.split(":",1)[-1].strip()
            elif "üìú" in line:
                quest['description'] = line.split(":",1)[-1].strip()
            elif "üèÜ" in line:
                quest['reward'] = line.split(":",1)[-1].strip()
            elif "‚è∞" in line:
                quest['deadline'] = line.split(":",1)[-1].strip()

        return quest if quest else {"raw": content}
    except Exception as e:
        return {"error": str(e)}
